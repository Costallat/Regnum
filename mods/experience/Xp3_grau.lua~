minetest.register_on_dignode(function(pos, oldnode, digger)
	namer = oldnode.name
	see_if_mineral = minetest.get_item_group(namer, "xpg")
	if see_if_mineral > 0 then
		minetest.env:add_entity(pos, "experience:orb_grau")
	end
end)

minetest.register_on_newplayer(function(player)
	file = io.open(minetest.get_worldpath().."/"..player:get_player_name().."_experience_grau", "w")
	file:write("0")
	file:close()
end)

grau_level1 = 5
grau_level1_drop = "tutorial:coin_grau 1"
grau_level1S = 5
grau_level1S_drop = "tutorial:level1_grau"


grau_level2 = 10
grau_level2_drop = "tutorial:coin_grau 1"
grau_level2S = 10
grau_level2S_drop = "tutorial:level2_grau"


grau_level3 = 15
grau_level3_drop = "tutorial:coin_grau 1"
grau_level3S = 15
grau_level3S_drop = "tutorial:level3_grau"


grau_level4 = 20
grau_level4_drop = "tutorial:coin_grau 1"
grau_level4S = 20
grau_level4S_drop = "tutorial:level4_grau"


grau_level5 = 25
grau_level5_drop = "tutorial:coin_grau 1"
grau_level5S = 25
grau_level5S_drop = "tutorial:level5_grau"


grau_level6 = 30
grau_level6_drop = "tutorial:coin_grau 1"
grau_level6S = 30
grau_level6S_drop = "tutorial:level6_grau"


grau_level7 = 35
grau_level7_drop = "tutorial:coin_grau 1"
grau_level7S = 35
grau_level7S_drop = "tutorial:level7_grau"


grau_level8 = 40
grau_level8_drop = "tutorial:coin_grau 1"
grau_level8S = 40
grau_level8S_drop = "tutorial:level8_grau"


grau_level9 = 45
grau_level9_drop = "tutorial:coin_grau 1"
grau_level9S = 45
grau_level9S_drop = "tutorial:level9_grau"


grau_level10 = 50
grau_level10_drop = "tutorial:coin_grau 1"
grau_level10S = 50
grau_level10S_drop = "tutorial:level10_grau"
grau_level10SS = 50
grau_level10SS_drop = "tutorial:xp_block"


grau_level11 = 60
grau_level11_drop = "tutorial:coin_grau 2"
grau_level11S = 60
grau_level11S_drop = "tutorial:level11_grau"


grau_level12 = 70
grau_level12_drop = "tutorial:coin_grau 2"
grau_level12S = 70
grau_level12S_drop = "tutorial:level12_grau"


grau_level13 = 80
grau_level13_drop = "tutorial:coin_grau 2"
grau_level13S = 80
grau_level13S_drop = "tutorial:level13_grau"


grau_level14 = 90
grau_level14_drop = "tutorial:coin_grau 2"
grau_level14S = 90
grau_level14S_drop = "tutorial:level14_grau"


grau_level15 = 100
grau_level15_drop = "tutorial:coin_grau 2"
grau_level15S = 100
grau_level15S_drop = "tutorial:level15_grau"


grau_level16 = 110
grau_level16_drop = "tutorial:coin_grau 2"
grau_level16S = 110
grau_level16S_drop = "tutorial:level16_grau"


grau_level17 = 120
grau_level17_drop = "tutorial:coin_grau 2"
grau_level17S = 120
grau_level17S_drop = "tutorial:level17_grau"


grau_level18 = 130
grau_level18_drop = "tutorial:coin_grau 2"
grau_level18S = 130
grau_level18S_drop = "tutorial:level18_grau"


grau_level19 = 140
grau_level19_drop = "tutorial:coin_grau 2"
grau_level19S = 140
grau_level19S_drop = "tutorial:level19_grau"


grau_level20 = 150
grau_level20_drop = "tutorial:coin_grau 2"
grau_level20S = 150
grau_level20S_drop = "tutorial:level20_grau"
grau_level20SS = 150
grau_level20SS_drop = "tutorial:xp_block"




minetest.register_globalstep(function(dtime)
	for _,player in ipairs(minetest.get_connected_players()) do
		local pos = player:getpos()
		pos.y = pos.y+0.5
		for _,object in ipairs(minetest.env:get_objects_inside_radius(pos, 1)) do
			if not object:is_player() and object:get_luaentity() and object:get_luaentity().name == "experience:orb_grau" then
				--RIGHT HERE ADD IN THE CODE TO UPGRADE PLAYERS 
				object:setvelocity({x=0,y=0,z=0})
				object:get_luaentity().name = "STOP"
				minetest.sound_play("orb", {
					to_player = player:get_player_name(),
				})
				xpg = io.open(minetest.get_worldpath().."/"..player:get_player_name().."_experience_grau", "r")
				experience_grau = xpg:read("*l")
				xpg:close()
				if experience_grau ~= nil then
					new_xpg = experience_grau + 1
					xpg_write = io.open(minetest.get_worldpath().."/"..player:get_player_name().."_experience_grau", "w")
					xpg_write:write(new_xpg)
					xpg_write:close()
if new_xpg == grau_level1 then
						minetest.env:add_item(pos, grau_level1_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level1S then
						minetest.env:add_item(pos, grau_level1S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level2 then
						minetest.env:add_item(pos, grau_level2_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level2S then
						minetest.env:add_item(pos, grau_level2S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level3 then
						minetest.env:add_item(pos, grau_level3_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level3S then
						minetest.env:add_item(pos, grau_level3S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level4 then
						minetest.env:add_item(pos, grau_level4_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level4S then
						minetest.env:add_item(pos, grau_level4S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level5 then
						minetest.env:add_item(pos, grau_level5_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level5S then
						minetest.env:add_item(pos, grau_level5S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level6 then
						minetest.env:add_item(pos, grau_level6_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level6S then
						minetest.env:add_item(pos, grau_level6S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level7 then
						minetest.env:add_item(pos, grau_level7_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level7S then
						minetest.env:add_item(pos, grau_level7S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level8 then
						minetest.env:add_item(pos, grau_level8_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level8S then
						minetest.env:add_item(pos, grau_level8S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level9 then
						minetest.env:add_item(pos, grau_level9_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level9S then
						minetest.env:add_item(pos, grau_level9S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level10 then
						minetest.env:add_item(pos, grau_level10_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level10S then
						minetest.env:add_item(pos, grau_level10S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level10SS then
						minetest.env:add_item(pos, grau_level10SS_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level11 then
						minetest.env:add_item(pos, grau_level11_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level11S then
						minetest.env:add_item(pos, grau_level11S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level12 then
						minetest.env:add_item(pos, grau_level12_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level12S then
						minetest.env:add_item(pos, grau_level12S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level13 then
						minetest.env:add_item(pos, grau_level13_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level13S then
						minetest.env:add_item(pos, grau_level13S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level14 then
						minetest.env:add_item(pos, grau_level14_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level14S then
						minetest.env:add_item(pos, grau_level14S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level15 then
						minetest.env:add_item(pos, grau_level15_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level15S then
						minetest.env:add_item(pos, grau_level15S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level16 then
						minetest.env:add_item(pos, grau_level16_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level16S then
						minetest.env:add_item(pos, grau_level16S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level17 then
						minetest.env:add_item(pos, grau_level17_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level17S then
						minetest.env:add_item(pos, grau_level17S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level18 then
						minetest.env:add_item(pos, grau_level18_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level18S then
						minetest.env:add_item(pos, grau_level18S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level19 then
						minetest.env:add_item(pos, grau_level19_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level19S then
						minetest.env:add_item(pos, grau_level19S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level20 then
						minetest.env:add_item(pos, grau_level20_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level20S then
						minetest.env:add_item(pos, grau_level20S_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end
if new_xpg == grau_level20SS then
						minetest.env:add_item(pos, grau_level20SS_drop)
						minetest.sound_play("level_up", {
							to_player = player:get_player_name(),
						})
					end

				end
			object:remove()
		end
	end
for _,object in ipairs(minetest.env:get_objects_inside_radius(pos, 3)) do
			if not object:is_player() and object:get_luaentity() and object:get_luaentity().name == "experience:orb_grau" then
				if object:get_luaentity().collect then
					local pos1 = pos
					pos1.y = pos1.y+0.2
					local pos2 = object:getpos()
					local vec = {x=pos1.x-pos2.x, y=pos1.y-pos2.y, z=pos1.z-pos2.z}
					vec.x = vec.x*3
					vec.y = vec.y*3
					vec.z = vec.z*3
					object:setvelocity(vec)
				end
			end
		end
	end
end)

minetest.register_entity("experience:orb_grau", {
	physical = true,
	timer = 0,
	textures = {"orb_grau.png"},
	visual_size = {x=0.3, y=0.3},
	collisionbox = {-0.17,-0.17,-0.17,0.17,0.17,0.17},
	on_activate = function(self, staticdata)
		self.object:set_armor_groups({immortal=1})
		self.object:setvelocity({x=0, y=1, z=0})
		self.object:setacceleration({x=0, y=-10, z=0})
	end,
	collect = true,
	on_step = function(self, dtime)
		self.timer = self.timer + dtime
		if (self.timer > 300) then
			self.object:remove()
		end
		local p = self.object:getpos()
		local nn = minetest.env:get_node(p).name
		noder = minetest.env:get_node(p).name
		p.y = p.y - 0.3
		local nn = minetest.env:get_node(p).name
		if not minetest.registered_nodes[nn] or minetest.registered_nodes[nn].walkable then
			if self.physical_state then
				self.object:setvelocity({x=0, y=0, z=0})
				self.object:setacceleration({x=0, y=0, z=0})
				self.physical_state = false
				self.object:set_properties({
					physical = false
				})
			end
		else
			if not self.physical_state then
				self.object:setvelocity({x=0,y=0,z=0})
				self.object:setacceleration({x=0, y=-10, z=0})
				self.physical_state = true
				self.object:set_properties({
					physical = true
				})
			end
		end
	end,
})



